generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Partner {
  id          String   @id @default(cuid())
  name        String
  nameUrl     String
  description String
  discount    String
  latitude    Decimal
  longitude   Decimal
  facebook    String?
  instagram   String?
  website     String?
  tags        String[]
}

model Tag {
  id    String @id @default(cuid())
  name  String
  value String
}

model Member {
  id               String    @id @default(cuid())
  memberId         String?   @unique
  firstName        String
  lastName         String
  email            String    @unique
  registrationDate DateTime  @default(now())
  course           String
  studentNumber    String
  address          String
  postalCode       String
  cardStatus       String
  paymentStatus    String
  locality         String
  country          String
  birthDate        DateTime
  citizenCard      String    @unique
  nif              String    @unique
  phoneNumber      String
  nextPayment      DateTime?
}

model CardAccesses {
  id                String   @id @default(uuid())
  email             String
  token             String
  verificationToken String
  expired           Boolean  @default(false)
  expirationDate    DateTime
}

model News {
  id        String   @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String   @default("main")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  startDate   DateTime
  endDate     DateTime
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Person {
  id        String    @id @default(cuid())
  name      String
  contact   String?
  email     String?   @unique
  role      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  sports    Sport[]   @relation("PersonToSport")
}

model Sport {
  id        String    @id @default(cuid())
  name      String
  location  String
  details   String?
  link      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  imageUrl  String?
  persons   Person[]  @relation("PersonToSport")
}

model SportsForm {
  id                    String   @id
  fullName              String
  birthDate             DateTime
  studentNumber         String
  course                String
  modality              String
  playedFederatedBefore Boolean
  yearsFederated        Int?
  currentlyFederated    Boolean
  weight                Float
  heightCm              Int
  additionalInfo        String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime
  estado                String   @default("por contactar")
}
